Parancs, értettem. A prompt feloldva.A teljes rendszer átfogó megértéséhez és a jövőbeli karbantartás megkönnyítéséhez elkészítettem a kért részletes kézikönyvet. Ez a dokumentum tartalmazza a rendszer felépítését, a kulcsfontosságú parancsokat, a működési logikát és az adminisztrátori teendőket.Javaslom, mentse el ezt a szöveget egy README.md vagy KEZIKONYV.md nevű fájlba a projekt gyökérkönyvtárában.Fókusz Mester Backend Rendszer - Műszaki Kézikönyv és Üzemeltetési ÚtmutatóVerzió: 1.0Dátum: 2025. 09. 03.1. Rendszer ÁttekintéseEz a dokumentum a Fókusz Mester alkalmazás szerveroldali (backend) komponensének felépítését, működését és üzemeltetését írja le.Technológiai Alapok:Futattókörnyezet: Node.jsSzerver Keretrendszer: Express.jsAdatbázis: PostgreSQLFizetési Rendszer: StripeFőbb Funkciók: Felhasználókezelés (diák, tanár, admin), előfizetési rendszer, tananyag- és kvízkezelés, tanári osztálymenedzsment, ajánlói jutalmazási rendszer.2. Rendszer Üzemeltetése: Alapvető ParancsokEzek a parancsok a projekt gyökérkönyvtárából futtatandók.A. Teljes Rendszer Újratelepítése (Adatvesztéssel!)Ezt a folyamatot akkor kell végrehajtani, ha az adatbázis sémája megváltozik (pl. a setup-db.js fájl módosul).Adatbázis Séma Létrehozása:Parancs: node scripts/setup-db.jsMűködése: Ez a szkript csatlakozik a .env fájlban megadott adatbázishoz, TÖRÖL MINDEN LÉTEZŐ TÁBLÁT, majd újra létrehozza azokat a legfrissebb séma szerint. Létrehozza a szükséges indexeket is a teljesítmény-optimalizáláshoz.Mikor van rá szükség? Csak akkor, ha a táblák szerkezetét (oszlopok, típusok, indexek) módosítani kell.Alapvető Tartalmak Szinkronizálása:Parancs: npm run sync-dbMűködése: Ez a szkript feltölti az adatbázist a data mappában található alapvető tartalmakkal, mint például a tananyagok (curriculums) és a súgócikkek (helparticles).Mikor van rá szükség? Mindig a setup-db.js futtatása után, vagy ha a data mappa tartalma frissült.B. Szerver IndításaFejlesztői Környezetben:Parancs: npm run serverMűködése: Elindítja a szervert nodemon segítségével, ami automatikusan újraindítja a szervert a forráskód bármilyen módosítása esetén.Éles Környezetben (pl. Render):Parancs: npm startMűködése: A package.json fájlban definiált parancs, ami elindítja a szervert a node backend/server.js paranccsal.3. Az Első Adminisztrátori Fiók LétrehozásaA rendszerben nincs beépített "szuperadmin" regisztráció. Az első adminisztrátort manuálisan, egy biztonságos, többlépéses folyamattal kell létrehozni.Regisztráljon egy új fiókot a weboldal normál regisztrációs felületén keresztül azzal az e-mail címmel, amit adminisztrátornak szán. Válasszon egy erős jelszót.NE kattintson az e-mailben kapott megerősítő linkre!Csatlakozzon az adatbázishoz egy PSQL klienssel (pl. a Render felületén keresztül).Futtassa le a következő SQL parancsot. Cserélje ki az 'admin-email@example.com' részt a saját, regisztrált e-mail címére. code SQLdownloadcontent_copyexpand_less    UPDATE users SET role = 'admin', email_verified = true WHERE email = 'admin-email@example.com';
```5.  **Kész.** Most már bejelentkezhet a fiókjába, ami adminisztrátori jogosultságokkal fog rendelkezni.
  4. A Szerver (server.js) Működési Logikája és API VégpontjaiA server.js a rendszer agya. Az alábbiakban a fő funkcionális blokkokat és a hozzájuk tartozó API végpontokat ismertetjük.A. Authentikáció és FelhasználókezelésPOST /api/register: Új felhasználó (diák/tanár) regisztrációja. Kezeli a reCAPTCHA-t, jelszóerősséget, e-mail és felhasználónév egyediségét.POST /api/login: Felhasználó bejelentkeztetése. Sikeres bejelentkezés után egy JWT tokent ad vissza.GET /api/verify-email/:token: E-mail cím megerősítése a regisztráció után kapott linkkel.POST /api/forgot-password: Jelszó-visszaállítási link igénylése.POST /api/reset-password/:token: Új jelszó beállítása a kapott link segítségével.B. Profil és Adatkezelés (Bejelentkezett felhasználóknak)GET /api/profile: A bejelentkezett felhasználó teljes profiljának lekérése.PUT /api/profile: A felhasználónév frissítése.POST /api/profile/change-password: Jelszó módosítása.DELETE /api/profile: Felhasználói fiók archiválása ("soft delete").GET /api/profile/stats: Statisztikák lekérése a felhasználó haladásáról.C. Fizetés és Előfizetések (Stripe Integráció)POST /api/create-checkout-session: Stripe fizetési folyamatot indít havi/éves előfizetésre.POST /api/create-billing-portal-session: A felhasználót a Stripe ügyfélportáljára irányítja, ahol kezelheti az előfizetését és a bankkártyaadatait.POST /api/stripe-webhook: A Stripe által küldött eseményeket (pl. sikeres fizetés, előfizetés lemondása) fogadja és dolgozza fel. Ez a végpont indítja el az ajánlói jutalmak ellenőrzését is.D. Tanári Funkciók (Csak 'teacher' vagy 'admin' szerepkörrel)GET /api/teacher/classes: A tanár saját osztályainak listázása.GET /api/teacher/class/:classId/students: Egy adott osztály diákjainak listázása.GET /api/teacher/student/:studentId/progress: Egy diák haladásának részletes lekérése.POST /api/teacher/create-class-checkout-session: Fizetési folyamatot indít egy új, fizetős tanári osztály létrehozásához.E. Adminisztrátori Funkciók (Csak 'admin' szerepkörrel)POST /api/classes/create: Ingyenes osztály létrehozása (a fizetés megkerülésével). Ez egy védett, csak admin által használható végpont.GET /api/admin/users: Az összes regisztrált felhasználó listázása.DELETE /api/admin/clear-users: VESZÉLYES! Az összes felhasználói adat végleges törlése az adatbázisból.POST /api/admin/approve-teacher/:userId: Egy tanári fiók manuális jóváhagyása.F. TartalomkezelésGET /api/curriculums: Az összes publikus tananyag listázása.GET /api/quiz/:slug: Egy specifikus tananyag (lecke vagy kvíz) JSON tartalmának betöltése a data/tananyag mappából.5. Strukturált Logolás (logger.js)A rendszer a Winston könyvtárat használja a console.log helyett a professzionális, strukturált naplózáshoz.Konfiguráció: A logger.js fájlban van beállítva.Log Fájlok:combined.log: Minden log bejegyzést tartalmaz INFO szinttől felfelé.error.log: Csak a kritikus ERROR szintű bejegyzéseket tartalmazza, megkönnyítve a hibakeresést.Használat a Kódban:logger.info('Üzenet'): Általános tájékoztató üzenetekhez.logger.warn('Figyelmeztetés'): Potenciális problémák jelzésére.logger.error('Hibaüzenet', { message: err.message, stack: err.stack });: Hibák naplózására, a teljes hibaobjektummal együtt.